import os
import sys
import subprocess
import shutil
import winreg

# Paths
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
DIST_DIR = os.path.join(CURRENT_DIR, 'dist')
BUILD_DIR = os.path.join(CURRENT_DIR, 'build')
SPEC_FILE = os.path.join(CURRENT_DIR, 'system_tray_agent.spec')
ICON_FILE = os.path.join(CURRENT_DIR, 'icon.ico')

# Create resources directory if it doesn't exist
RESOURCES_DIR = os.path.join(CURRENT_DIR, 'resources')
if not os.path.exists(RESOURCES_DIR):
    os.makedirs(RESOURCES_DIR)

# Copy icon to resources directory
if not os.path.exists(ICON_FILE):
    print("Warning: No icon found. Creating a placeholder icon.")
    try:
        # Here you would normally create or download an icon
        # For now, we'll just create an empty file
        open(ICON_FILE, 'w').close()
    except:
        print("Warning: Failed to create placeholder icon.")

# Create PyInstaller spec file
def create_spec_file():
    spec_content = f"""# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['system_tray_agent.py'],
    pathex=['{CURRENT_DIR}'],
    binaries=[],
    datas=[
        ('icon.ico', '.'),
    ],
    hiddenimports=['win32timezone'],
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='OfficeAgent',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='{ICON_FILE}',
    version='version.txt',
    uac_admin=False,
)

coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name='OfficeAgent',
)
"""
    
    with open(SPEC_FILE, 'w') as f:
        f.write(spec_content)
    
    # Create version info file
    version_info = """
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=(1, 0, 0, 0),
    prodvers=(1, 0, 0, 0),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
  ),
  kids=[
    StringFileInfo(
      [
        StringTable(
          u'040904B0',
          [StringStruct(u'CompanyName', u'Your Company'),
          StringStruct(u'FileDescription', u'Office Agent'),
          StringStruct(u'FileVersion', u'1.0.0.0'),
          StringStruct(u'InternalName', u'OfficeAgent'),
          StringStruct(u'LegalCopyright', u'Â© 2025 Your Company. All rights reserved.'),
          StringStruct(u'OriginalFilename', u'OfficeAgent.exe'),
          StringStruct(u'ProductName', u'Office Agent'),
          StringStruct(u'ProductVersion', u'1.0.0.0')])
      ]
    ),
    VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
  ]
)
"""
    with open(os.path.join(CURRENT_DIR, 'version.txt'), 'w') as f:
        f.write(version_info)

# Create NSIS installer script
def create_nsis_script():
    nsis_script = os.path.join(CURRENT_DIR, 'installer.nsi')
    
    script_content = """
; Office Agent Installer Script
; Generated by build_installer.py

!include "MUI2.nsh"
!include "FileFunc.nsh"

; Define variables
!define PRODUCT_NAME "Office Agent"
!define PRODUCT_VERSION "1.0.0"
!define PRODUCT_PUBLISHER "Your Company"
!define PRODUCT_WEB_SITE "https://www.yourcompany.com"
!define PRODUCT_DIR_REGKEY "Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\OfficeAgent.exe"
!define PRODUCT_UNINST_KEY "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${PRODUCT_NAME}"

SetCompressor lzma
Name "${PRODUCT_NAME}"
OutFile "OfficeAgent_Setup.exe"
InstallDir "$PROGRAMFILES\\Office Agent"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "icon.ico"
!define MUI_UNICON "icon.ico"

; Pages
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_LICENSE "LICENSE.txt"
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

; Install
Section "MainSection" SEC01
    SetOutPath "$INSTDIR"
    SetOverwrite ifnewer
    
    ; Copy all files from dist folder
    File /r "dist\\OfficeAgent\\*.*"
    
    ; Create shortcuts
    CreateDirectory "$SMPROGRAMS\\Office Agent"
    CreateShortCut "$SMPROGRAMS\\Office Agent\\Office Agent.lnk" "$INSTDIR\\OfficeAgent.exe"
    CreateShortCut "$DESKTOP\\Office Agent.lnk" "$INSTDIR\\OfficeAgent.exe"
    
    ; Create autorun registry entry
    WriteRegStr HKCU "Software\\Microsoft\\Windows\\CurrentVersion\\Run" "OfficeAgent" "$INSTDIR\\OfficeAgent.exe"
    
    ; Write uninstaller
    WriteUninstaller "$INSTDIR\\uninstall.exe"
    
    ; Write registry keys for uninstaller
    WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\\OfficeAgent.exe"
    WriteRegStr HKLM "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
    WriteRegStr HKLM "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\\uninstall.exe"
    WriteRegStr HKLM "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\\OfficeAgent.exe"
    WriteRegStr HKLM "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
    WriteRegStr HKLM "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
    WriteRegStr HKLM "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
    
    ${GetSize} "$INSTDIR" "/S=0K" $0 $1 $2
    IntFmt $0 "0x%08X" $0
    WriteRegDWORD HKLM "${PRODUCT_UNINST_KEY}" "EstimatedSize" "$0"
SectionEnd

; Uninstall
Section Uninstall
    ; Remove shortcuts
    Delete "$SMPROGRAMS\\Office Agent\\Office Agent.lnk"
    Delete "$DESKTOP\\Office Agent.lnk"
    RMDir "$SMPROGRAMS\\Office Agent"
    
    ; Remove registry entries
    DeleteRegKey HKLM "${PRODUCT_UNINST_KEY}"
    DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
    DeleteRegValue HKCU "Software\\Microsoft\\Windows\\CurrentVersion\\Run" "OfficeAgent"
    
    ; Remove files and directories
    RMDir /r "$INSTDIR"
SectionEnd
"""
    
    with open(nsis_script, 'w') as f:
        f.write(script_content)
    
    # Create a license file if it doesn't exist
    license_file = os.path.join(CURRENT_DIR, 'LICENSE.txt')
    if not os.path.exists(license_file):
        with open(license_file, 'w') as f:
            f.write("""End-User License Agreement (EULA)

This End-User License Agreement ("EULA") is a legal agreement between you and Your Company.

By installing, copying, or otherwise using the software product, you agree to be bound by the terms of this EULA.

1. LICENSE GRANT
Your Company grants you a non-exclusive, non-transferable license to use the software.

2. RESTRICTIONS
You may not reverse engineer, decompile, or disassemble the software.

3. COPYRIGHT
All title and copyrights in and to the software are owned by Your Company.

4. NO WARRANTIES
The software is provided "as is" without warranty of any kind.

5. LIMITATION OF LIABILITY
In no event shall Your Company be liable for any damages.

6. TERMINATION
This EULA is effective until terminated.
""")

def build_exe():
    """Build the executable using PyInstaller"""
    try:
        # Clean previous builds
        if os.path.exists(DIST_DIR):
            shutil.rmtree(DIST_DIR)
        if os.path.exists(BUILD_DIR):
            shutil.rmtree(BUILD_DIR)
        
        # Create the spec file
        create_spec_file()
        
        # Run PyInstaller
        subprocess.check_call([
            'pyinstaller',
            '--clean',
            '--noconfirm',
            SPEC_FILE
        ])
        
        return True
    except Exception as e:
        print(f"Error building executable: {str(e)}")
        return False

def build_installer():
    """Build the installer using NSIS"""
    try:
        # Check if NSIS is installed
        try:
            nsis_path = None
            # Try to find NSIS installation from registry
            try:
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\NSIS") as key:
                    nsis_path = winreg.QueryValueEx(key, "")[0]
            except:
                pass
            
            if not nsis_path:
                # Try common installation paths
                common_paths = [
                    r"C:\Program Files\NSIS\makensis.exe",
                    r"C:\Program Files (x86)\NSIS\makensis.exe"
                ]
                for path in common_paths:
                    if os.path.exists(path):
                        nsis_path = path
                        break
            
            if not nsis_path:
                print("NSIS not found. Please install NSIS from https://nsis.sourceforge.io/Download")
                return False
            
            # Create NSIS script
            create_nsis_script()
            
            # Run NSIS to create installer
            subprocess.check_call([
                nsis_path,
                os.path.join(CURRENT_DIR, 'installer.nsi')
            ])
            
            print(f"Installer created: {os.path.join(CURRENT_DIR, 'OfficeAgent_Setup.exe')}")
            return True
        except Exception as e:
            print(f"Error finding NSIS: {str(e)}")
            return False
    except Exception as e:
        print(f"Error building installer: {str(e)}")
        return False

if __name__ == "__main__":
    print("Building Office Agent executable...")
    if build_exe():
        print("Successfully built executable.")
        print("Building installer...")
        if build_installer():
            print("Successfully built installer.")
        else:
            print("Failed to build installer.")
    else:
        print("Failed to build executable.")